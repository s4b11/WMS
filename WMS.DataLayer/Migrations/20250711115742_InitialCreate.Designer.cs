// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WMS.DataLayer;

#nullable disable

namespace WMS.DataLayer.Migrations
{
    [DbContext(typeof(WMSDbContext))]
    [Migration("20250711115742_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WMS.Models.Models.CarrierModel.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Addr1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Addr2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("CpName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CstRegndate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CstRegnno")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LstRegndate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LstRegnno")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("StRegndate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StRegnno")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("TransExistFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("Id");

                    b.ToTable("Carrier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Addr1 = "123 Skyline Rd",
                            Addr2 = "Suite 400",
                            City = "Mumbai",
                            CountryId = 101,
                            CpName = "John Doe",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CstRegndate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CstRegnno = "CST54321",
                            CustomerId = 1001,
                            Email = "contact@expresslogistics.com",
                            IsDeleted = false,
                            LstRegndate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LstRegnno = "LST12345",
                            Mobile = "9876543210",
                            ModifiedBy = 1,
                            ModifiedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Express Logistics",
                            Phone = "02212345678",
                            Pin = "400001",
                            StRegndate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            StRegnno = "ST11111",
                            StateId = 27,
                            TransExistFlag = "N",
                            Type = "Air",
                            UniqueGuId = new Guid("4162c02d-a287-4f2f-a0c3-f50e88951719")
                        },
                        new
                        {
                            Id = 2,
                            Addr1 = "456 NH Road",
                            City = "Chennai",
                            CountryId = 101,
                            CpName = "Jane Smith",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CstRegndate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CstRegnno = "CST09876",
                            CustomerId = 1002,
                            Email = "support@cargomovers.in",
                            IsDeleted = false,
                            LstRegndate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LstRegnno = "LST67890",
                            Mobile = "9123456780",
                            ModifiedBy = 1,
                            ModifiedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Cargo Movers",
                            Phone = "04487654321",
                            Pin = "600001",
                            StRegndate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            StRegnno = "ST22222",
                            StateId = 33,
                            TransExistFlag = "Y",
                            Type = "Road",
                            UniqueGuId = new Guid("5acf9f29-dbff-4c84-a582-2959fa429e01")
                        });
                });

            modelBuilder.Entity("WMS.Models.Models.CompanyModel.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Addr1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Addr2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("BaseCurr")
                        .HasColumnType("integer");

                    b.Property<string>("CPEmailID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CPMobile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CSTDATE")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CSTNO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ECCNO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TINDATE")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TINNO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TransExistFlag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("N");

                    b.Property<string>("URL")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<string>("_3PLFlag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("N");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Addr1 = "123 Main Street",
                            Addr2 = "Suite 500",
                            BaseCurr = 1,
                            CPEmailID = "john.smith@abccorp.com",
                            CPMobile = "+1-917-555-5678",
                            CSTDATE = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CSTNO = "CST456789",
                            City = "New York",
                            Code = "ABC001",
                            ContactPerson = "John Smith",
                            CountryId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ECCNO = "EC12345678",
                            EmailID = "info@abccorp.com",
                            Image = new byte[0],
                            ImageName = "abc-corp.jpg",
                            ImagePath = "/images/companies/abc-corp.jpg",
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ABC Corporation",
                            Phone = "+1-212-555-1234",
                            Pin = "10001",
                            StateId = 1,
                            TINDATE = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            TINNO = "TIN987654",
                            TransExistFlag = "Y",
                            URL = "www.abccorp.com",
                            UniqueGuId = new Guid("24c8090d-3c70-462a-a318-4a9090dca96d"),
                            UserID = 1,
                            _3PLFlag = "N"
                        },
                        new
                        {
                            Id = 2,
                            Addr1 = "456 Commerce Road",
                            BaseCurr = 1,
                            CPEmailID = "sarah.j@xyzlogistics.com",
                            CPMobile = "+1-312-555-7891",
                            City = "Chicago",
                            Code = "XYZ002",
                            ContactPerson = "Sarah Johnson",
                            CountryId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailID = "contact@xyzlogistics.com",
                            Image = new byte[0],
                            ImageName = "xyz-logistics.jpg",
                            ImagePath = "/images/companies/xyz-logistics.jpg",
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "XYZ Logistics",
                            Phone = "+1-312-555-7890",
                            Pin = "60601",
                            StateId = 2,
                            TransExistFlag = "N",
                            URL = "www.xyzlogistics.com",
                            UniqueGuId = new Guid("c7cd4c4c-1881-48ff-ae3b-850a50b8c504"),
                            UserID = 1,
                            _3PLFlag = "Y"
                        });
                });

            modelBuilder.Entity("WMS.Models.Models.CountryModel.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "AF",
                            CountryName = "Afghanistan",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("fd86f784-93de-4bfb-a8db-c7e09d70ed9e")
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "AL",
                            CountryName = "Albania",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("de8bdd82-fb43-4ba2-a877-faf451ba9f51")
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "DZ",
                            CountryName = "Algeria",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("a79fd19e-0f00-45c0-8c2e-7fa91bd97175")
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "AD",
                            CountryName = "Andorra",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("40266f15-1b92-4586-9c7c-730b63781b37")
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "AO",
                            CountryName = "Angola",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("5a13c656-6e2e-419b-b9ad-c4c9ba6604dc")
                        },
                        new
                        {
                            Id = 6,
                            CountryCode = "AG",
                            CountryName = "Antigua and Barbuda",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("3ef2d48f-651f-4b34-a961-30eb9c802e58")
                        },
                        new
                        {
                            Id = 7,
                            CountryCode = "AR",
                            CountryName = "Argentina",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("e81dd9fe-a12a-4fa0-a0be-f8e1055ea24e")
                        },
                        new
                        {
                            Id = 8,
                            CountryCode = "AM",
                            CountryName = "Armenia",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("2c9aa1dc-32a4-4ab6-8f50-a84fd666d65e")
                        },
                        new
                        {
                            Id = 9,
                            CountryCode = "AU",
                            CountryName = "Australia",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("be8c94f5-4660-4a77-aca6-c146c87ca81f")
                        },
                        new
                        {
                            Id = 10,
                            CountryCode = "AT",
                            CountryName = "Austria",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("de0c8df3-dc16-4661-9f4d-86d96ee6782d")
                        },
                        new
                        {
                            Id = 11,
                            CountryCode = "AZ",
                            CountryName = "Azerbaijan",
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniqueGuId = new Guid("b91e3f50-0934-4747-8f84-0b4db2602276")
                        });
                });

            modelBuilder.Entity("WMS.Models.Models.CurrencyModel.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USD",
                            CountryId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "US Dollar",
                            UniqueGuId = new Guid("9994a29d-edb8-49f9-a35d-088571425165")
                        },
                        new
                        {
                            Id = 2,
                            Code = "EUR",
                            CountryId = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Euro",
                            UniqueGuId = new Guid("a99743a7-67a4-4729-bbf8-459523cf87a6")
                        });
                });

            modelBuilder.Entity("WMS.Models.Models.CustomerModel.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Addr1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Addr2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("BaseCurr")
                        .HasColumnType("integer");

                    b.Property<string>("CPEmailID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CPMobile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CSTDATE")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CSTNO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ECCNO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TINDATE")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TINNO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<char>("TransExistFlag")
                        .HasColumnType("character(1)");

                    b.Property<string>("URL")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Addr1 = "123 Main St",
                            Addr2 = "Suite 400",
                            BaseCurr = 1,
                            CPEmailID = "john.doe@acmecorp.com",
                            CPMobile = "9876543210",
                            CSTDATE = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CSTNO = "CST123456",
                            City = "New York",
                            Code = "ACM001",
                            CompanyId = 1,
                            ContactPerson = "John Doe",
                            CountryId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ECCNO = "ECC123456",
                            EmailID = "info@acmecorp.com",
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Acme Corp",
                            Phone = "1234567890",
                            Pin = "10001",
                            StateId = 10,
                            TINDATE = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            TINNO = "TIN987654",
                            TransExistFlag = 'N',
                            URL = "https://acmecorp.com",
                            UniqueGuId = new Guid("eef456a9-0481-4db5-af5b-3fbdaf5c2d44"),
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            Addr1 = "456 Market Ave",
                            BaseCurr = 2,
                            CPEmailID = "jane.smith@betaind.com",
                            CPMobile = "8765432109",
                            City = "Los Angeles",
                            Code = "BET002",
                            CompanyId = 1,
                            ContactPerson = "Jane Smith",
                            CountryId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailID = "contact@betaind.com",
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beta Industries",
                            Phone = "2345678901",
                            Pin = "90001",
                            StateId = 5,
                            TINDATE = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            TINNO = "TIN654321",
                            TransExistFlag = 'Y',
                            URL = "https://betaind.com",
                            UniqueGuId = new Guid("84f1a1e5-bcba-4268-93fd-970b17e58e13"),
                            UserID = 2
                        });
                });

            modelBuilder.Entity("WMS.Models.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UniqueGuId")
                        .HasColumnType("uuid");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("WMS.Models.Models.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLog");
                });

            modelBuilder.Entity("WMS.Models.Models.SeqErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("Curval")
                        .HasColumnType("bigint");

                    b.Property<int>("Incr")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Seed")
                        .HasColumnType("integer");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("Id");

                    b.ToTable("SeqErrorLog");
                });

            modelBuilder.Entity("WMS.Models.Models.UomModel.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TransExistFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("N");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("Id");

                    b.ToTable("Uom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifiedBy = 1,
                            ModifiedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Kilogram",
                            Short = "kg",
                            TransExistFlag = "Y",
                            UniqueGuId = new Guid("3b65c5ce-e0c0-4900-875f-cfe0ae1a12c7")
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifiedBy = 1,
                            ModifiedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Liter",
                            Short = "L",
                            TransExistFlag = "Y",
                            UniqueGuId = new Guid("70273171-4a0c-4118-b1c2-688403d6aa51")
                        });
                });

            modelBuilder.Entity("WMS.Models.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WMS.Models.Models.VendorModel.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Addr1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Addr2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("BaseCurr")
                        .HasColumnType("integer");

                    b.Property<string>("CPEmailID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CPMobile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CSTDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CSTNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("ECCNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<char>("FDType")
                        .HasColumnType("character(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TINDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TINNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<char?>("TransExist")
                        .HasColumnType("character(1)");

                    b.Property<Guid>("UniqueGuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vendor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Addr1 = "123 International Road",
                            Addr2 = "Suite 501",
                            BaseCurr = 1,
                            CPEmailID = "j.doe@gtc.com",
                            CPMobile = "+1-212-555-2000",
                            CSTDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CSTNo = "CST456789",
                            City = "New York",
                            Code = "GTC001",
                            ContactPerson = "John Doe",
                            CountryId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1001,
                            ECCNo = "ECC123456",
                            EmailID = "info@gtc.com",
                            FDType = 'F',
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Global Trade Co.",
                            Phone = "+1-212-555-1000",
                            Pin = "10001",
                            StateId = 10,
                            TINDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            TINNo = "TIN789012",
                            TransExist = 'N',
                            UniqueGuId = new Guid("da2c7bd3-daa1-442d-a0df-1ba1c29f26d4"),
                            Url = "https://www.gtc.com",
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            Addr1 = "456 Local Street",
                            BaseCurr = 2,
                            CPEmailID = "anita.rao@dsl.in",
                            CPMobile = "+91-9876543210",
                            CSTDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CSTNo = "CST987654",
                            City = "Mumbai",
                            Code = "DSL002",
                            ContactPerson = "Anita Rao",
                            CountryId = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1002,
                            ECCNo = "ECC654321",
                            EmailID = "support@dsl.in",
                            FDType = 'D',
                            IsDeleted = false,
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Domestic Supplies Ltd.",
                            Phone = "+91-22-555-3000",
                            Pin = "400001",
                            StateId = 21,
                            TINDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            TINNo = "TIN210987",
                            TransExist = 'Y',
                            UniqueGuId = new Guid("03453b94-f32a-489d-85a3-0fb75348d46c"),
                            Url = "https://www.dsl.in",
                            UserID = 2
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
